@use "sass:map";
@use "sass:color";
@use "sass:math";


// VARIABLE & FUNCTIONS
// theme colors
$primary: #172601;
$secondary: #6A8C1F;
$tertiary: #F2BB16;
$background: #b5c68f;
$accent: #A67437;
$accent-light: #caac87;

// color palette
$colors: (
    "primary": $primary,
    "secondary": $secondary,
    "tertiary": $tertiary,
    "background": $background,
    "accent": $accent,
    "accent-light": $accent-light,
    "black": black,
    "white": white,
);

// spacing
$base-padding: 0.75rem;
$base-margin: 0.75rem;
$small-padding: 0.25rem;
$large-padding: 1.5rem;

// borders
$base-border-thickness: 1px;
$base-border-radius: 20px;

// box-shadow
$base-box-shadow: 1px 3px 5px rgba(0, 0, 0, 0.1);


// font sizes
$base-font-size: 1rem;
$font-size-sm: $base-font-size * 0.75;
$font-size-lg: $base-font-size * 1.5;
$font-size-xl: $base-font-size * 2;
$font-size-xxl: $base-font-size * 3;

// functions

@function light-comp($color){
    $complement: color.complement($color);
    $light-complement: color.scale($complement, $lightness: 30%);
    @return $light-complement;
};



// BASE & LAYOUT

@import url('https://fonts.googleapis.com/css2?family=Host+Grotesk:ital,wght@0,300..800;1,300..800&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap');

* {
    color: inherit;
    margin: 0;
}

body {
    font-family: Host Grotesk;
}

ul {
    padding: 0;
    list-style-type: none;
}

link {
    text-decoration: none;
}

hr {
    border: 0;
    border-top: 1px dotted #efefef;
}

img {
    max-width: 100%;
}

h1 {
    color: $primary;
    margin-bottom: $base-margin;
}

h2 {
    color: $primary;
    margin-bottom: $base-margin;
}

h3 {
    color: $secondary;
    margin-bottom: $small-padding;
}

button {
    color: #111;
    border: 0;
    background: $secondary;
    border-radius: $base-border-radius;
    padding: $base-padding;
};

// BREAKPOINTS

$breakpoints: (
    "xs": 0,
    "sm": 480px,
    "md": 740px,
    "lg": 960px,
    "xl": 1200px,
);

@mixin xs {
    @media (min-width: map.get($breakpoints, "xs")) {
        @content; 
    }
};

@mixin sm {
    @media (min-width: map.get($breakpoints, "sm")) {
        @content; 
    }
};

@mixin md {
    @media (min-width: map.get($breakpoints, "md")) {
        @content; 
    }
};

@mixin lg {
    @media (min-width: map.get($breakpoints, "lg")) {
        @content; 
    }
};

@mixin xl {
    @media (min-width: map.get($breakpoints, "xl")) {
        @content; 
    }
};

/* flexible breakpoint */
@mixin breakpoint($bp: 0) {
    @media (min-width: $bp) {
        @content;
    }
};

// GRID

$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
};

.row {
    display: flex;
    flex-flow: row wrap;
};

@each $key, $val in $grid-gaps {
    .gap-#{$key} > * {
        padding: $val
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
};

@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}

@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
};

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
};

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
};

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
};

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
};

// COLORS

@each $key, $val in $colors {
    .text-#{$key} {
        color: $val;
    }

    .text-hover-#{$key} {
        &:hover {
          color: $val;
        }
      }

    .bg-#{$key} {
        background-color: $val;
    }

    @if($val !=black and $val !=white) {
        // light-variations
        @for $i from 1 through 9 {
            .text-#{$key}-light-#{$i} {
                color: color.mix(white, $val, $i * 10%);

            }

            .text-hover-#{$key}-light-#{$i} {
                &:hover {
                    color: color.mix(white, $val, $i * 10%);

                }
              }

            .bg-#{$key}-light-#{$i} {
                background-color: color.mix(white, $val, $i * 10%);
            }
        }

        // dark-variations
        @for $i from 1 through 9 {
            .text-#{$key}-dark-#{$i} {
                color: color.mix(black, $val, $i * 10%);

            }

            .text-hover-#{$key}-dark-#{$i} {
                &:hover {
                    color: color.mix(black, $val, $i * 10%);
                }
              }

            .bg-#{$key}-dark-#{$i} {
                background-color: color.mix(black, $val, $i * 10%);
            }
    }}
}


// COMPONENTS (button, cards, etc.)
.card {
    display: block;
    padding: $base-padding;
    border: $base-border-thickness solid #ddd;
    box-shadow: $base-box-shadow;
    border-radius: 5px;

    h3 {
        font-size: $font-size-lg;
        padding-bottom: $base-padding;
        font-weight: bold;
    }
}

@mixin btn($bg-color: #caac87) {
    text-decoration: none;
    cursor: pointer;
    display: inline-block;
    border: 0;
    padding: $base-padding $base-padding * 2;
    border-radius: $base-border-radius;
    background-color: $bg-color;
}

@each $key, $val in $colors {
    
    .btn {
        @include btn;
    }

    .btn-#{$key} {
        @include btn($val);
        &:hover {
            background-color: color.scale($val, $lightness: 15%);
        }
    }

    .btn-outlined-#{$key} {
        @include btn(#fff);
        border: $base-border-thickness solid $val;
        &:hover {
            background-color: $val;
        }
    }

    .btn-complement-#{$key} {
        @include btn($val);
        color: light-comp($val);
        &:hover {
            color: $val;
            background-color: light-comp($val);
        }
    }
};

.flex-layout {
    width: 100% ;
    display: flex;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
}

.navbar {
    @extend .flex-layout;
    padding: $base-padding $base-padding * 2;
    box-shadow: $base-box-shadow;
    background-color: $primary;

    .site-title {
        font-size: $font-size-lg;
    }

    .container {
        @extend .flex-layout;
    }
}

.menu {
    width: 100% ;
    display: flex;
    align-items: center;
    justify-content: end;
    box-sizing: border-box;
}

$hero-background-image: url('/public/img/building-5323266_1920.jpg');
$overlay-color: rgba(0, 0, 0, 0.5);

.hero {
  background-image: $hero-background-image;
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  color: white;
  padding: 100px 20px;
  text-align: center;
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: $overlay-color;
    z-index: 1;
  }

  * {
    position: relative;
    z-index: 2;
  }
}

// UTILITES (margin, padding, opacity etc.)

$utilities: (
    "padding": (
        "prefix": "p", 
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-left": (
        "prefix": "pl", 
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-right": (
        "prefix": "pr", 
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-top": (
        "prefix": "pt", 
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-bottom": (
        "prefix": "pb", 
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "margin": (
        "prefix": "m", 
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-left": (
        "prefix": "ml", 
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-right": (
        "prefix": "mr", 
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-top": (
        "prefix": "mt", 
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-bottom": (
        "prefix": "mb", 
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "opacity": (
        "prefix": "o",
        "values": (
        "10": 0.1,
        "20": 0.2,
        "30": 0.3,
        "40": 0.4,
        "50": 0.5,
        "60": 0.6,
        "70": 0.7,
        "80": 0.8,
        "90": 0.9,
        "100": 1,
        ),
  ),

  "border-radius": (
    "prefix": "br",
    "values": (
      "default": $base-border-radius,
      "none": 0,
      "xs": math.div($base-border-radius, 4),
      "sm": math.div($base-border-radius, 2),
      "lg": $base-border-radius * 2,
      "full": 50%,
    )
  ),

  "display": (
    "prefix": "display",
    "values": (
      "n": none,
      "b": block,
      "f": flex,
      "i": inline,
      "i-b": inline-block
    )
  ),

  "font-size": (
    "prefix": "font",
    "values": (
      "sm": $font-size-sm,
      "md": $base-font-size,
      "lg": $font-size-lg,
      "xl": $font-size-xl,
      "xxl": $font-size-xxl
    )
  ),
);

@each $property, $map in $utilities{
    $prefix: map.get($map, "prefix");
    $values: map.get($map, "values");

    @each $k, $v in $values {
        @if($k == "default") {
            .#{$prefix} {
                #{$property}: $v;
            }
        } @else {
            .#{$prefix}-#{$k}{
                #{$property}: $v
            }
        }
    }
};

